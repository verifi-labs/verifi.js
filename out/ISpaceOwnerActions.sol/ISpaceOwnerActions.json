{"abi":[{"type":"function","name":"cancel","inputs":[{"name":"proposalId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateSettings","inputs":[{"name":"input","type":"tuple","internalType":"struct UpdateSettingsCalldata","components":[{"name":"minVotingDuration","type":"uint32","internalType":"uint32"},{"name":"maxVotingDuration","type":"uint32","internalType":"uint32"},{"name":"votingDelay","type":"uint32","internalType":"uint32"},{"name":"metadataURI","type":"string","internalType":"string"},{"name":"daoURI","type":"string","internalType":"string"},{"name":"proposalValidationStrategy","type":"tuple","internalType":"struct Strategy","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"params","type":"bytes","internalType":"bytes"}]},{"name":"proposalValidationStrategyMetadataURI","type":"string","internalType":"string"},{"name":"authenticatorsToAdd","type":"address[]","internalType":"address[]"},{"name":"authenticatorsToRemove","type":"address[]","internalType":"address[]"},{"name":"votingStrategiesToAdd","type":"tuple[]","internalType":"struct Strategy[]","components":[{"name":"addr","type":"address","internalType":"address"},{"name":"params","type":"bytes","internalType":"bytes"}]},{"name":"votingStrategyMetadataURIsToAdd","type":"string[]","internalType":"string[]"},{"name":"votingStrategiesToRemove","type":"uint8[]","internalType":"uint8[]"}]}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"cancel(uint256)":"40e58ee5","updateSettings((uint32,uint32,uint32,string,string,(address,bytes),string,address[],address[],(address,bytes)[],string[],uint8[]))":"d830616c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"votingDelay\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy\",\"name\":\"proposalValidationStrategy\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"proposalValidationStrategyMetadataURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authenticatorsToAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"authenticatorsToRemove\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy[]\",\"name\":\"votingStrategiesToAdd\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"votingStrategyMetadataURIsToAdd\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"votingStrategiesToRemove\",\"type\":\"uint8[]\"}],\"internalType\":\"struct UpdateSettingsCalldata\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancel(uint256)\":{\"params\":{\"proposalId\":\"The proposal to cancel.\"}},\"updateSettings((uint32,uint32,uint32,string,string,(address,bytes),string,address[],address[],(address,bytes)[],string[],uint8[]))\":{\"details\":\"The structure should consist of:     minVotingDuration The new minimum voting duration. Set to `NO_UPDATE_UINT32` to ignore.     maxVotingDuration The new maximum voting duration. Set to `NO_UPDATE_UINT32` to ignore.     votingDelay The new voting delay. Set to `NO_UPDATE_UINT32` to ignore.     metadataURI The new metadataURI. Set to `NO_UPDATE_STRING` to ignore.     daoURI The new daoURI. Set to `NO_UPDATE_STRING` to ignore.     proposalValidationStrategy The new proposal validation strategy to use. Set                 to `NO_UPDATE_STRATEGY` to ignore.     proposalValidationStrategyMetadataURI The new metadata URI for the proposal validation strategy.     authenticatorsToAdd The authenticators to add. Set to an empty array to ignore.     authenticatorsToRemove The authenticators to remove. Set to an empty array to ignore.     votingStrategiesToAdd The voting strategies to add. Set to an empty array to ignore.     votingStrategyMetadataURIsToAdd The voting strategy metadata uris to add. Set to                 an empty array to ignore.     votignStrategiesToRemove The indices of voting strategies to remove. Set to empty array to ignore.\",\"params\":{\"input\":\"The settings to modify\"}}},\"title\":\"Space Owner Actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancel(uint256)\":{\"notice\":\"Cancels a proposal that has not already been finalized.\"},\"updateSettings((uint32,uint32,uint32,string,string,(address,bytes),string,address[],address[],(address,bytes)[],string[],uint8[]))\":{\"notice\":\"Updates the settings.\"}},\"notice\":\"The actions that can be performed by the owner of a Space,         These are in addition to the methods exposed by the `OwnableUpgradeable` module and the         `upgradeTo()` method of `UUPSUpgradeable`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/space/ISpaceOwnerActions.sol\":\"ISpaceOwnerActions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\":@murky/=lib/murky/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@zodiac/=lib/zodiac/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":zodiac/=lib/zodiac/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/safe-contracts/contracts/common/Enum.sol\":{\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://948e6d5a8bd7377f7795b6e28584eab9be5c0a8db240bf5e606744a175238c3d\",\"dweb:/ipfs/QmQQaUmQfpuejV41jbxKSTgEBYYCcVTjCsDMgf2htgz6ej\"]},\"src/interfaces/IExecutionStrategy.sol\":{\"keccak256\":\"0x9b9679eff484ba280e87813d75011d80a3001c0aefb6f50c7a4ca5110c842173\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc195aca37c2e778fd58f367191cee3c16a9cf03eeb13be387d650e92866dfcd\",\"dweb:/ipfs/QmW4sJB3i3ZGUtJx3hUuuiVfEHVFvpxFufv3zM8QxuJPDu\"]},\"src/interfaces/execution-strategies/IExecutionStrategyErrors.sol\":{\"keccak256\":\"0x8a1c904a4f3573013dbe8b55e3322dc929c9d6e56dc4cfe7a8e7866834661430\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://358d063db15582f772bd49400a90b5087fa6768068581494f87a5ba1eb9ef20a\",\"dweb:/ipfs/QmSovbYrxxMXvyhWTfAuZYcUDhJ1VRZca4XjiE1e8vv9Yb\"]},\"src/interfaces/space/ISpaceOwnerActions.sol\":{\"keccak256\":\"0xb97b08a44ca04477f3e7f0761542a8df6c88300f761cc7fac0a47faf7016669a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://354f3a9d3bc1cf627b9ea5f88eea898a406afd95b7d35aed043cda117193a40a\",\"dweb:/ipfs/QmeeinePhbg43MVS9jdWjVPrwZVJvU8hTfUY3onntRF4qn\"]},\"src/types.sol\":{\"keccak256\":\"0xcdc5465d75fd7bdbde15892a0ef01f16fb8ab48907e4183acb860af91c93fee4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc76c16a6ecc59eb6dc5c53d032d691f8bc08b417d41ef87960a54713bbd2e7f\",\"dweb:/ipfs/QmZbvxxmZEyus5hX5ThYD6qDuaTjpWR8FLZLGTEDKKBDsb\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"cancel"},{"inputs":[{"internalType":"struct UpdateSettingsCalldata","name":"input","type":"tuple","components":[{"internalType":"uint32","name":"minVotingDuration","type":"uint32"},{"internalType":"uint32","name":"maxVotingDuration","type":"uint32"},{"internalType":"uint32","name":"votingDelay","type":"uint32"},{"internalType":"string","name":"metadataURI","type":"string"},{"internalType":"string","name":"daoURI","type":"string"},{"internalType":"struct Strategy","name":"proposalValidationStrategy","type":"tuple","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes","name":"params","type":"bytes"}]},{"internalType":"string","name":"proposalValidationStrategyMetadataURI","type":"string"},{"internalType":"address[]","name":"authenticatorsToAdd","type":"address[]"},{"internalType":"address[]","name":"authenticatorsToRemove","type":"address[]"},{"internalType":"struct Strategy[]","name":"votingStrategiesToAdd","type":"tuple[]","components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes","name":"params","type":"bytes"}]},{"internalType":"string[]","name":"votingStrategyMetadataURIsToAdd","type":"string[]"},{"internalType":"uint8[]","name":"votingStrategiesToRemove","type":"uint8[]"}]}],"stateMutability":"nonpayable","type":"function","name":"updateSettings"}],"devdoc":{"kind":"dev","methods":{"cancel(uint256)":{"params":{"proposalId":"The proposal to cancel."}},"updateSettings((uint32,uint32,uint32,string,string,(address,bytes),string,address[],address[],(address,bytes)[],string[],uint8[]))":{"details":"The structure should consist of:     minVotingDuration The new minimum voting duration. Set to `NO_UPDATE_UINT32` to ignore.     maxVotingDuration The new maximum voting duration. Set to `NO_UPDATE_UINT32` to ignore.     votingDelay The new voting delay. Set to `NO_UPDATE_UINT32` to ignore.     metadataURI The new metadataURI. Set to `NO_UPDATE_STRING` to ignore.     daoURI The new daoURI. Set to `NO_UPDATE_STRING` to ignore.     proposalValidationStrategy The new proposal validation strategy to use. Set                 to `NO_UPDATE_STRATEGY` to ignore.     proposalValidationStrategyMetadataURI The new metadata URI for the proposal validation strategy.     authenticatorsToAdd The authenticators to add. Set to an empty array to ignore.     authenticatorsToRemove The authenticators to remove. Set to an empty array to ignore.     votingStrategiesToAdd The voting strategies to add. Set to an empty array to ignore.     votingStrategyMetadataURIsToAdd The voting strategy metadata uris to add. Set to                 an empty array to ignore.     votignStrategiesToRemove The indices of voting strategies to remove. Set to empty array to ignore.","params":{"input":"The settings to modify"}}},"version":1},"userdoc":{"kind":"user","methods":{"cancel(uint256)":{"notice":"Cancels a proposal that has not already been finalized."},"updateSettings((uint32,uint32,uint32,string,string,(address,bytes),string,address[],address[],(address,bytes)[],string[],uint8[]))":{"notice":"Updates the settings."}},"version":1}},"settings":{"remappings":["@gnosis.pm/safe-contracts/=lib/safe-contracts/","@murky/=lib/murky/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@zodiac/=lib/zodiac/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","murky/=lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","safe-contracts/=lib/safe-contracts/contracts/","zodiac/=lib/zodiac/contracts/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/interfaces/space/ISpaceOwnerActions.sol":"ISpaceOwnerActions"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"lib/safe-contracts/contracts/common/Enum.sol":{"keccak256":"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f","urls":["bzz-raw://948e6d5a8bd7377f7795b6e28584eab9be5c0a8db240bf5e606744a175238c3d","dweb:/ipfs/QmQQaUmQfpuejV41jbxKSTgEBYYCcVTjCsDMgf2htgz6ej"],"license":"LGPL-3.0-only"},"src/interfaces/IExecutionStrategy.sol":{"keccak256":"0x9b9679eff484ba280e87813d75011d80a3001c0aefb6f50c7a4ca5110c842173","urls":["bzz-raw://cc195aca37c2e778fd58f367191cee3c16a9cf03eeb13be387d650e92866dfcd","dweb:/ipfs/QmW4sJB3i3ZGUtJx3hUuuiVfEHVFvpxFufv3zM8QxuJPDu"],"license":"MIT"},"src/interfaces/execution-strategies/IExecutionStrategyErrors.sol":{"keccak256":"0x8a1c904a4f3573013dbe8b55e3322dc929c9d6e56dc4cfe7a8e7866834661430","urls":["bzz-raw://358d063db15582f772bd49400a90b5087fa6768068581494f87a5ba1eb9ef20a","dweb:/ipfs/QmSovbYrxxMXvyhWTfAuZYcUDhJ1VRZca4XjiE1e8vv9Yb"],"license":"MIT"},"src/interfaces/space/ISpaceOwnerActions.sol":{"keccak256":"0xb97b08a44ca04477f3e7f0761542a8df6c88300f761cc7fac0a47faf7016669a","urls":["bzz-raw://354f3a9d3bc1cf627b9ea5f88eea898a406afd95b7d35aed043cda117193a40a","dweb:/ipfs/QmeeinePhbg43MVS9jdWjVPrwZVJvU8hTfUY3onntRF4qn"],"license":"MIT"},"src/types.sol":{"keccak256":"0xcdc5465d75fd7bdbde15892a0ef01f16fb8ab48907e4183acb860af91c93fee4","urls":["bzz-raw://bc76c16a6ecc59eb6dc5c53d032d691f8bc08b417d41ef87960a54713bbd2e7f","dweb:/ipfs/QmZbvxxmZEyus5hX5ThYD6qDuaTjpWR8FLZLGTEDKKBDsb"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"src/interfaces/space/ISpaceOwnerActions.sol","id":63724,"exportedSymbols":{"ISpaceOwnerActions":[63723],"Strategy":[64106],"UpdateSettingsCalldata":[64199]},"nodeType":"SourceUnit","src":"33:2001:110","nodes":[{"id":63705,"nodeType":"PragmaDirective","src":"33:24:110","nodes":[],"literals":["solidity","^","0.8",".18"]},{"id":63708,"nodeType":"ImportDirective","src":"59:67:110","nodes":[],"absolutePath":"src/types.sol","file":"../../types.sol","nameLocation":"-1:-1:-1","scope":63724,"sourceUnit":64200,"symbolAliases":[{"foreign":{"id":63706,"name":"Strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64106,"src":"68:8:110","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":63707,"name":"UpdateSettingsCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":64199,"src":"78:22:110","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":63723,"nodeType":"ContractDefinition","src":"385:1648:110","nodes":[{"id":63715,"nodeType":"FunctionDefinition","src":"546:45:110","nodes":[],"documentation":{"id":63710,"nodeType":"StructuredDocumentation","src":"420:121:110","text":"@notice  Cancels a proposal that has not already been finalized.\n @param   proposalId  The proposal to cancel."},"functionSelector":"40e58ee5","implemented":false,"kind":"function","modifiers":[],"name":"cancel","nameLocation":"555:6:110","parameters":{"id":63713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63712,"mutability":"mutable","name":"proposalId","nameLocation":"570:10:110","nodeType":"VariableDeclaration","scope":63715,"src":"562:18:110","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63711,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:110","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"561:20:110"},"returnParameters":{"id":63714,"nodeType":"ParameterList","parameters":[],"src":"590:0:110"},"scope":63723,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":63722,"nodeType":"FunctionDefinition","src":"1959:72:110","nodes":[],"documentation":{"id":63716,"nodeType":"StructuredDocumentation","src":"597:1357:110","text":"@notice Updates the settings.\n @param input The settings to modify\n @dev The structure should consist of:\n     minVotingDuration The new minimum voting duration. Set to `NO_UPDATE_UINT32` to ignore.\n     maxVotingDuration The new maximum voting duration. Set to `NO_UPDATE_UINT32` to ignore.\n     votingDelay The new voting delay. Set to `NO_UPDATE_UINT32` to ignore.\n     metadataURI The new metadataURI. Set to `NO_UPDATE_STRING` to ignore.\n     daoURI The new daoURI. Set to `NO_UPDATE_STRING` to ignore.\n     proposalValidationStrategy The new proposal validation strategy to use. Set\n                 to `NO_UPDATE_STRATEGY` to ignore.\n     proposalValidationStrategyMetadataURI The new metadata URI for the proposal validation strategy.\n     authenticatorsToAdd The authenticators to add. Set to an empty array to ignore.\n     authenticatorsToRemove The authenticators to remove. Set to an empty array to ignore.\n     votingStrategiesToAdd The voting strategies to add. Set to an empty array to ignore.\n     votingStrategyMetadataURIsToAdd The voting strategy metadata uris to add. Set to\n                 an empty array to ignore.\n     votignStrategiesToRemove The indices of voting strategies to remove. Set to empty array to ignore."},"functionSelector":"d830616c","implemented":false,"kind":"function","modifiers":[],"name":"updateSettings","nameLocation":"1968:14:110","parameters":{"id":63720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63719,"mutability":"mutable","name":"input","nameLocation":"2015:5:110","nodeType":"VariableDeclaration","scope":63722,"src":"1983:37:110","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UpdateSettingsCalldata_$64199_calldata_ptr","typeString":"struct UpdateSettingsCalldata"},"typeName":{"id":63718,"nodeType":"UserDefinedTypeName","pathNode":{"id":63717,"name":"UpdateSettingsCalldata","nameLocations":["1983:22:110"],"nodeType":"IdentifierPath","referencedDeclaration":64199,"src":"1983:22:110"},"referencedDeclaration":64199,"src":"1983:22:110","typeDescriptions":{"typeIdentifier":"t_struct$_UpdateSettingsCalldata_$64199_storage_ptr","typeString":"struct UpdateSettingsCalldata"}},"visibility":"internal"}],"src":"1982:39:110"},"returnParameters":{"id":63721,"nodeType":"ParameterList","parameters":[],"src":"2030:0:110"},"scope":63723,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"ISpaceOwnerActions","contractDependencies":[],"contractKind":"interface","documentation":{"id":63709,"nodeType":"StructuredDocumentation","src":"128:257:110","text":"@title Space Owner Actions\n @notice The actions that can be performed by the owner of a Space,\n         These are in addition to the methods exposed by the `OwnableUpgradeable` module and the\n         `upgradeTo()` method of `UUPSUpgradeable`."},"fullyImplemented":false,"linearizedBaseContracts":[63723],"name":"ISpaceOwnerActions","nameLocation":"395:18:110","scope":63724,"usedErrors":[]}],"license":"MIT"},"id":110}