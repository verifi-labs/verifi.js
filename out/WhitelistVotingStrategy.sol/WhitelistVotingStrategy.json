{"abi":[{"type":"function","name":"getVotingPower","inputs":[{"name":"","type":"uint32","internalType":"uint32"},{"name":"voter","type":"address","internalType":"address"},{"name":"params","type":"bytes","internalType":"bytes"},{"name":"userParams","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"votingPower","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"error","name":"VoterAndIndexMismatch","inputs":[]}],"bytecode":{"object":"0x6080806040523461001657610346908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63871d81b71461002757600080fd5b3461020b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b5760043563ffffffff81160361020b5760243573ffffffffffffffffffffffffffffffffffffffff8116810361020b5760443567ffffffffffffffff811161020b576100a59036906004016102c8565b60643567ffffffffffffffff811161020b576100c59036906004016102c8565b919092602081838101031261020b57803567ffffffffffffffff811161020b57810191808201601f8401121561020b5782359167ffffffffffffffff8311610299577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8460051b01166080016080811067ffffffffffffffff821117610299576040528260805260206080019382820160208560061b8301011161020b57929190869460208501945b60208560061b82010186106102105789876020818b8101031261020b57359073ffffffffffffffffffffffffffffffffffffffff806101b08460806102f6565b5151169116036101e1576bffffffffffffffffffffffff60206101d5819360806102f6565b51015116604051908152f35b60046040517f08cd432d000000000000000000000000000000000000000000000000000000008152fd5b600080fd5b90919293949550604086858501031261020b57604051916040830183811067ffffffffffffffff82111761029957604052863573ffffffffffffffffffffffffffffffffffffffff8116810361020b57835260208701356bffffffffffffffffffffffff8116900361020b57602087810135848201529281528896604001959493920190610170565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9181601f8401121561020b5782359167ffffffffffffffff831161020b576020838186019501011161020b57565b805182101561030a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c6343000812000a","sourceMap":"248:1426:128:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080604052600436101561001257600080fd5b60003560e01c63871d81b71461002757600080fd5b3461020b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b5760043563ffffffff81160361020b5760243573ffffffffffffffffffffffffffffffffffffffff8116810361020b5760443567ffffffffffffffff811161020b576100a59036906004016102c8565b60643567ffffffffffffffff811161020b576100c59036906004016102c8565b919092602081838101031261020b57803567ffffffffffffffff811161020b57810191808201601f8401121561020b5782359167ffffffffffffffff8311610299577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8460051b01166080016080811067ffffffffffffffff821117610299576040528260805260206080019382820160208560061b8301011161020b57929190869460208501945b60208560061b82010186106102105789876020818b8101031261020b57359073ffffffffffffffffffffffffffffffffffffffff806101b08460806102f6565b5151169116036101e1576bffffffffffffffffffffffff60206101d5819360806102f6565b51015116604051908152f35b60046040517f08cd432d000000000000000000000000000000000000000000000000000000008152fd5b600080fd5b90919293949550604086858501031261020b57604051916040830183811067ffffffffffffffff82111761029957604052863573ffffffffffffffffffffffffffffffffffffffff8116810361020b57835260208701356bffffffffffffffffffffffff8116900361020b57602087810135848201529281528896604001959493920190610170565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9181601f8401121561020b5782359167ffffffffffffffff831161020b576020838186019501011161020b57565b805182101561030a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea164736f6c6343000812000a","sourceMap":"248:1426:128:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;1451:30;;;248:1426;1451:30;;;;248:1426;;;;;;;;;;;;;1451:30;;;;248:1426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1451:30;;;;248:1426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1512:33;;248:1426;1512:33;;;;248:1426;;;;;;;;1569:19;248:1426;;1569:19;:::i;:::-;;248:1426;;;;1560:33;1556:69;;248:1426;;1643:19;248:1426;;;1643:19;:::i;:::-;;:22;248:1426;;;;;;;;1556:69;248:1426;;;1602:23;;;;248:1426;;;;;1451:30;;;;;;;248:1426;1451:30;;;;248:1426;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;","linkReferences":{}},"methodIdentifiers":{"getVotingPower(uint32,address,bytes,bytes)":"871d81b7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VoterAndIndexMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userParams\",\"type\":\"bytes\"}],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getVotingPower(uint32,address,bytes,bytes)\":{\"params\":{\"params\":\"Parameter array containing the encoded whitelist of addresses and their voting power.               The array should be an ABI encoded array of Member structs.\",\"userParams\":\"Expected to contain a `uint256` corresponding to the voterIndex in the array provided by `params`.\",\"voter\":\"The address to get the voting power of.\"},\"returns\":{\"votingPower\":\"The voting power of the address if it exists in the whitelist, otherwise reverts.\"}}},\"title\":\"Whitelist Voting Strategy\",\"version\":1},\"userdoc\":{\"errors\":{\"VoterAndIndexMismatch()\":[{\"notice\":\"Error thrown when the `voter` and address indicated by `voterIndex`         don't match.\"}]},\"kind\":\"user\",\"methods\":{\"getVotingPower(uint32,address,bytes,bytes)\":{\"notice\":\"Returns the voting power of an address.\"}},\"notice\":\"Allows a variable voting power whitelist to be used for voting power.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/voting-strategies/WhitelistVotingStrategy.sol\":\"WhitelistVotingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\":@murky/=lib/murky/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@zodiac/=lib/zodiac/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":zodiac/=lib/zodiac/contracts/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IVotingStrategy.sol\":{\"keccak256\":\"0xb97999d3a8b99bbd2d2ab6af81c713e58712c8f64a8b5fd05650ea8402ac4e3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58fdfe331e3da03708393ab00678ae33f2fe2b9bca780484c8e5aec1577733f4\",\"dweb:/ipfs/QmQG3vMGucyfhucH4e4Myikn41bntXH5QpsDSYS8kCbtF5\"]},\"src/voting-strategies/WhitelistVotingStrategy.sol\":{\"keccak256\":\"0x450f0ea419f90967f00ba61eb8e67426629e94559b58bc019c73314912760278\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6a44b1402f157c56359706bc62e7758b726192759056a7aa25c7b258b838561\",\"dweb:/ipfs/QmQTSLc3Cgxm4dDgQVAXXnsM4khFcmr8Bc1jfqD6YQG3pr\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"VoterAndIndexMismatch"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"address","name":"voter","type":"address"},{"internalType":"bytes","name":"params","type":"bytes"},{"internalType":"bytes","name":"userParams","type":"bytes"}],"stateMutability":"pure","type":"function","name":"getVotingPower","outputs":[{"internalType":"uint256","name":"votingPower","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"getVotingPower(uint32,address,bytes,bytes)":{"params":{"params":"Parameter array containing the encoded whitelist of addresses and their voting power.               The array should be an ABI encoded array of Member structs.","userParams":"Expected to contain a `uint256` corresponding to the voterIndex in the array provided by `params`.","voter":"The address to get the voting power of."},"returns":{"votingPower":"The voting power of the address if it exists in the whitelist, otherwise reverts."}}},"version":1},"userdoc":{"kind":"user","methods":{"getVotingPower(uint32,address,bytes,bytes)":{"notice":"Returns the voting power of an address."}},"version":1}},"settings":{"remappings":["@gnosis.pm/safe-contracts/=lib/safe-contracts/","@murky/=lib/murky/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@zodiac/=lib/zodiac/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","murky/=lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","safe-contracts/=lib/safe-contracts/contracts/","zodiac/=lib/zodiac/contracts/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/voting-strategies/WhitelistVotingStrategy.sol":"WhitelistVotingStrategy"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/interfaces/IVotingStrategy.sol":{"keccak256":"0xb97999d3a8b99bbd2d2ab6af81c713e58712c8f64a8b5fd05650ea8402ac4e3e","urls":["bzz-raw://58fdfe331e3da03708393ab00678ae33f2fe2b9bca780484c8e5aec1577733f4","dweb:/ipfs/QmQG3vMGucyfhucH4e4Myikn41bntXH5QpsDSYS8kCbtF5"],"license":"MIT"},"src/voting-strategies/WhitelistVotingStrategy.sol":{"keccak256":"0x450f0ea419f90967f00ba61eb8e67426629e94559b58bc019c73314912760278","urls":["bzz-raw://b6a44b1402f157c56359706bc62e7758b726192759056a7aa25c7b258b838561","dweb:/ipfs/QmQTSLc3Cgxm4dDgQVAXXnsM4khFcmr8Bc1jfqD6YQG3pr"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"src/voting-strategies/WhitelistVotingStrategy.sol","id":65577,"exportedSymbols":{"IVotingStrategy":[63394],"WhitelistVotingStrategy":[65576]},"nodeType":"SourceUnit","src":"33:1642:128","nodes":[{"id":65508,"nodeType":"PragmaDirective","src":"33:24:128","nodes":[],"literals":["solidity","^","0.8",".18"]},{"id":65510,"nodeType":"ImportDirective","src":"59:68:128","nodes":[],"absolutePath":"src/interfaces/IVotingStrategy.sol","file":"../interfaces/IVotingStrategy.sol","nameLocation":"-1:-1:-1","scope":65577,"sourceUnit":63395,"symbolAliases":[{"foreign":{"id":65509,"name":"IVotingStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63394,"src":"68:15:128","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":65576,"nodeType":"ContractDefinition","src":"248:1426:128","nodes":[{"id":65516,"nodeType":"ErrorDefinition","src":"419:30:128","nodes":[],"documentation":{"id":65514,"nodeType":"StructuredDocumentation","src":"306:108:128","text":"@notice Error thrown when the `voter` and address indicated by `voterIndex`\n         don't match."},"errorSelector":"08cd432d","name":"VoterAndIndexMismatch","nameLocation":"425:21:128","parameters":{"id":65515,"nodeType":"ParameterList","parameters":[],"src":"446:2:128"}},{"id":65521,"nodeType":"StructDefinition","src":"518:143:128","nodes":[],"canonicalName":"WhitelistVotingStrategy.Member","members":[{"constant":false,"id":65518,"mutability":"mutable","name":"addr","nameLocation":"588:4:128","nodeType":"VariableDeclaration","scope":65521,"src":"580:12:128","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65517,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:128","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":65520,"mutability":"mutable","name":"vp","nameLocation":"652:2:128","nodeType":"VariableDeclaration","scope":65521,"src":"645:9:128","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":65519,"name":"uint96","nodeType":"ElementaryTypeName","src":"645:6:128","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"Member","nameLocation":"525:6:128","scope":65576,"visibility":"public"},{"id":65575,"nodeType":"FunctionDefinition","src":"1209:463:128","nodes":[],"body":{"id":65574,"nodeType":"Block","src":"1415:257:128","nodes":[],"statements":[{"assignments":[65540],"declarations":[{"constant":false,"id":65540,"mutability":"mutable","name":"members","nameLocation":"1441:7:128","nodeType":"VariableDeclaration","scope":65574,"src":"1425:23:128","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr","typeString":"struct WhitelistVotingStrategy.Member[]"},"typeName":{"baseType":{"id":65538,"nodeType":"UserDefinedTypeName","pathNode":{"id":65537,"name":"Member","nameLocations":["1425:6:128"],"nodeType":"IdentifierPath","referencedDeclaration":65521,"src":"1425:6:128"},"referencedDeclaration":65521,"src":"1425:6:128","typeDescriptions":{"typeIdentifier":"t_struct$_Member_$65521_storage_ptr","typeString":"struct WhitelistVotingStrategy.Member"}},"id":65539,"nodeType":"ArrayTypeName","src":"1425:8:128","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Member_$65521_storage_$dyn_storage_ptr","typeString":"struct WhitelistVotingStrategy.Member[]"}},"visibility":"internal"}],"id":65548,"initialValue":{"arguments":[{"id":65543,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65528,"src":"1462:6:128","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":65544,"name":"Member","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65521,"src":"1471:6:128","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Member_$65521_storage_ptr_$","typeString":"type(struct WhitelistVotingStrategy.Member storage pointer)"}},"id":65545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"1471:8:128","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct WhitelistVotingStrategy.Member memory[] memory)"}}],"id":65546,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1470:10:128","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct WhitelistVotingStrategy.Member memory[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr_$","typeString":"type(struct WhitelistVotingStrategy.Member memory[] memory)"}],"expression":{"id":65541,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1451:3:128","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":65542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1455:6:128","memberName":"decode","nodeType":"MemberAccess","src":"1451:10:128","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":65547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1451:30:128","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr","typeString":"struct WhitelistVotingStrategy.Member memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1425:56:128"},{"assignments":[65550],"declarations":[{"constant":false,"id":65550,"mutability":"mutable","name":"voterIndex","nameLocation":"1499:10:128","nodeType":"VariableDeclaration","scope":65574,"src":"1491:18:128","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65549,"name":"uint256","nodeType":"ElementaryTypeName","src":"1491:7:128","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":65558,"initialValue":{"arguments":[{"id":65553,"name":"userParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65530,"src":"1523:10:128","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":65555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1536:7:128","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":65554,"name":"uint256","nodeType":"ElementaryTypeName","src":"1536:7:128","typeDescriptions":{}}}],"id":65556,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1535:9:128","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":65551,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1512:3:128","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":65552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1516:6:128","memberName":"decode","nodeType":"MemberAccess","src":"1512:10:128","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":65557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1512:33:128","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1491:54:128"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":65564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":65559,"name":"voter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65526,"src":"1560:5:128","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":65560,"name":"members","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65540,"src":"1569:7:128","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr","typeString":"struct WhitelistVotingStrategy.Member memory[] memory"}},"id":65562,"indexExpression":{"id":65561,"name":"voterIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65550,"src":"1577:10:128","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1569:19:128","typeDescriptions":{"typeIdentifier":"t_struct$_Member_$65521_memory_ptr","typeString":"struct WhitelistVotingStrategy.Member memory"}},"id":65563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1589:4:128","memberName":"addr","nodeType":"MemberAccess","referencedDeclaration":65518,"src":"1569:24:128","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1560:33:128","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":65568,"nodeType":"IfStatement","src":"1556:69:128","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":65565,"name":"VoterAndIndexMismatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65516,"src":"1602:21:128","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":65566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1602:23:128","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":65567,"nodeType":"RevertStatement","src":"1595:30:128"}},{"expression":{"expression":{"baseExpression":{"id":65569,"name":"members","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65540,"src":"1643:7:128","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Member_$65521_memory_ptr_$dyn_memory_ptr","typeString":"struct WhitelistVotingStrategy.Member memory[] memory"}},"id":65571,"indexExpression":{"id":65570,"name":"voterIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65550,"src":"1651:10:128","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1643:19:128","typeDescriptions":{"typeIdentifier":"t_struct$_Member_$65521_memory_ptr","typeString":"struct WhitelistVotingStrategy.Member memory"}},"id":65572,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1663:2:128","memberName":"vp","nodeType":"MemberAccess","referencedDeclaration":65520,"src":"1643:22:128","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":65535,"id":65573,"nodeType":"Return","src":"1636:29:128"}]},"baseFunctions":[63393],"documentation":{"id":65522,"nodeType":"StructuredDocumentation","src":"667:537:128","text":"@notice Returns the voting power of an address.\n @param voter The address to get the voting power of.\n @param params Parameter array containing the encoded whitelist of addresses and their voting power.\n               The array should be an ABI encoded array of Member structs.\n @param userParams Expected to contain a `uint256` corresponding to the voterIndex in the array provided by `params`.\n @return votingPower The voting power of the address if it exists in the whitelist, otherwise reverts."},"functionSelector":"871d81b7","implemented":true,"kind":"function","modifiers":[],"name":"getVotingPower","nameLocation":"1218:14:128","overrides":{"id":65532,"nodeType":"OverrideSpecifier","overrides":[],"src":"1376:8:128"},"parameters":{"id":65531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":65575,"src":"1242:6:128","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":65523,"name":"uint32","nodeType":"ElementaryTypeName","src":"1242:6:128","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":65526,"mutability":"mutable","name":"voter","nameLocation":"1284:5:128","nodeType":"VariableDeclaration","scope":65575,"src":"1276:13:128","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65525,"name":"address","nodeType":"ElementaryTypeName","src":"1276:7:128","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":65528,"mutability":"mutable","name":"params","nameLocation":"1314:6:128","nodeType":"VariableDeclaration","scope":65575,"src":"1299:21:128","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":65527,"name":"bytes","nodeType":"ElementaryTypeName","src":"1299:5:128","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":65530,"mutability":"mutable","name":"userParams","nameLocation":"1345:10:128","nodeType":"VariableDeclaration","scope":65575,"src":"1330:25:128","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":65529,"name":"bytes","nodeType":"ElementaryTypeName","src":"1330:5:128","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1232:129:128"},"returnParameters":{"id":65535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65534,"mutability":"mutable","name":"votingPower","nameLocation":"1402:11:128","nodeType":"VariableDeclaration","scope":65575,"src":"1394:19:128","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":65533,"name":"uint256","nodeType":"ElementaryTypeName","src":"1394:7:128","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1393:21:128"},"scope":65576,"stateMutability":"pure","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":65512,"name":"IVotingStrategy","nameLocations":["284:15:128"],"nodeType":"IdentifierPath","referencedDeclaration":63394,"src":"284:15:128"},"id":65513,"nodeType":"InheritanceSpecifier","src":"284:15:128"}],"canonicalName":"WhitelistVotingStrategy","contractDependencies":[],"contractKind":"contract","documentation":{"id":65511,"nodeType":"StructuredDocumentation","src":"129:119:128","text":"@title Whitelist Voting Strategy\n @notice Allows a variable voting power whitelist to be used for voting power."},"fullyImplemented":true,"linearizedBaseContracts":[65576,63394],"name":"WhitelistVotingStrategy","nameLocation":"257:23:128","scope":65577,"usedErrors":[65516]}],"license":"MIT"},"id":128}