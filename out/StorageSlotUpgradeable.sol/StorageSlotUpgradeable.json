{"abi":[],"bytecode":{"object":"0x6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000812000a","sourceMap":"1279:1402:33:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x600080fdfea164736f6c6343000812000a","sourceMap":"1279:1402:33:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":\"StorageSlotUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\":@murky/=lib/murky/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@zodiac/=lib/zodiac/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":zodiac/=lib/zodiac/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.18+commit.87f61d96"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@gnosis.pm/safe-contracts/=lib/safe-contracts/","@murky/=lib/murky/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/prb-test/src/","@zodiac/=lib/zodiac/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","murky/=lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","prb-test/=lib/prb-test/src/","safe-contracts/=lib/safe-contracts/contracts/","zodiac/=lib/zodiac/contracts/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol":"StorageSlotUpgradeable"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol":{"keccak256":"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a","urls":["bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3","dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol","id":47168,"exportedSymbols":{"StorageSlotUpgradeable":[47167]},"nodeType":"SourceUnit","src":"105:2577:33","nodes":[{"id":47109,"nodeType":"PragmaDirective","src":"105:23:33","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":47167,"nodeType":"ContractDefinition","src":"1279:1402:33","nodes":[{"id":47113,"nodeType":"StructDefinition","src":"1316:49:33","nodes":[],"canonicalName":"StorageSlotUpgradeable.AddressSlot","members":[{"constant":false,"id":47112,"mutability":"mutable","name":"value","nameLocation":"1353:5:33","nodeType":"VariableDeclaration","scope":47113,"src":"1345:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":47111,"name":"address","nodeType":"ElementaryTypeName","src":"1345:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1323:11:33","scope":47167,"visibility":"public"},{"id":47116,"nodeType":"StructDefinition","src":"1371:46:33","nodes":[],"canonicalName":"StorageSlotUpgradeable.BooleanSlot","members":[{"constant":false,"id":47115,"mutability":"mutable","name":"value","nameLocation":"1405:5:33","nodeType":"VariableDeclaration","scope":47116,"src":"1400:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":47114,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1378:11:33","scope":47167,"visibility":"public"},{"id":47119,"nodeType":"StructDefinition","src":"1423:49:33","nodes":[],"canonicalName":"StorageSlotUpgradeable.Bytes32Slot","members":[{"constant":false,"id":47118,"mutability":"mutable","name":"value","nameLocation":"1460:5:33","nodeType":"VariableDeclaration","scope":47119,"src":"1452:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47117,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1452:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1430:11:33","scope":47167,"visibility":"public"},{"id":47122,"nodeType":"StructDefinition","src":"1478:49:33","nodes":[],"canonicalName":"StorageSlotUpgradeable.Uint256Slot","members":[{"constant":false,"id":47121,"mutability":"mutable","name":"value","nameLocation":"1515:5:33","nodeType":"VariableDeclaration","scope":47122,"src":"1507:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":47120,"name":"uint256","nodeType":"ElementaryTypeName","src":"1507:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1485:11:33","scope":47167,"visibility":"public"},{"id":47133,"nodeType":"FunctionDefinition","src":"1625:190:33","nodes":[],"body":{"id":47132,"nodeType":"Block","src":"1709:106:33","nodes":[],"statements":[{"AST":{"nodeType":"YulBlock","src":"1771:38:33","statements":[{"nodeType":"YulAssignment","src":"1785:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"1795:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1785:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":47129,"isOffset":false,"isSlot":true,"src":"1785:6:33","suffix":"slot","valueSize":1},{"declaration":47125,"isOffset":false,"isSlot":false,"src":"1795:4:33","valueSize":1}],"id":47131,"nodeType":"InlineAssembly","src":"1762:47:33"}]},"documentation":{"id":47123,"nodeType":"StructuredDocumentation","src":"1533:87:33","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1634:14:33","parameters":{"id":47126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47125,"mutability":"mutable","name":"slot","nameLocation":"1657:4:33","nodeType":"VariableDeclaration","scope":47133,"src":"1649:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1649:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1648:14:33"},"returnParameters":{"id":47130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47129,"mutability":"mutable","name":"r","nameLocation":"1706:1:33","nodeType":"VariableDeclaration","scope":47133,"src":"1686:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$47113_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"},"typeName":{"id":47128,"nodeType":"UserDefinedTypeName","pathNode":{"id":47127,"name":"AddressSlot","nameLocations":["1686:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":47113,"src":"1686:11:33"},"referencedDeclaration":47113,"src":"1686:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$47113_storage_ptr","typeString":"struct StorageSlotUpgradeable.AddressSlot"}},"visibility":"internal"}],"src":"1685:23:33"},"scope":47167,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":47144,"nodeType":"FunctionDefinition","src":"1913:190:33","nodes":[],"body":{"id":47143,"nodeType":"Block","src":"1997:106:33","nodes":[],"statements":[{"AST":{"nodeType":"YulBlock","src":"2059:38:33","statements":[{"nodeType":"YulAssignment","src":"2073:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2083:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2073:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":47140,"isOffset":false,"isSlot":true,"src":"2073:6:33","suffix":"slot","valueSize":1},{"declaration":47136,"isOffset":false,"isSlot":false,"src":"2083:4:33","valueSize":1}],"id":47142,"nodeType":"InlineAssembly","src":"2050:47:33"}]},"documentation":{"id":47134,"nodeType":"StructuredDocumentation","src":"1821:87:33","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1922:14:33","parameters":{"id":47137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47136,"mutability":"mutable","name":"slot","nameLocation":"1945:4:33","nodeType":"VariableDeclaration","scope":47144,"src":"1937:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:14:33"},"returnParameters":{"id":47141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47140,"mutability":"mutable","name":"r","nameLocation":"1994:1:33","nodeType":"VariableDeclaration","scope":47144,"src":"1974:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$47116_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"},"typeName":{"id":47139,"nodeType":"UserDefinedTypeName","pathNode":{"id":47138,"name":"BooleanSlot","nameLocations":["1974:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":47116,"src":"1974:11:33"},"referencedDeclaration":47116,"src":"1974:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$47116_storage_ptr","typeString":"struct StorageSlotUpgradeable.BooleanSlot"}},"visibility":"internal"}],"src":"1973:23:33"},"scope":47167,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":47155,"nodeType":"FunctionDefinition","src":"2201:190:33","nodes":[],"body":{"id":47154,"nodeType":"Block","src":"2285:106:33","nodes":[],"statements":[{"AST":{"nodeType":"YulBlock","src":"2347:38:33","statements":[{"nodeType":"YulAssignment","src":"2361:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2371:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2361:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":47151,"isOffset":false,"isSlot":true,"src":"2361:6:33","suffix":"slot","valueSize":1},{"declaration":47147,"isOffset":false,"isSlot":false,"src":"2371:4:33","valueSize":1}],"id":47153,"nodeType":"InlineAssembly","src":"2338:47:33"}]},"documentation":{"id":47145,"nodeType":"StructuredDocumentation","src":"2109:87:33","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2210:14:33","parameters":{"id":47148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47147,"mutability":"mutable","name":"slot","nameLocation":"2233:4:33","nodeType":"VariableDeclaration","scope":47155,"src":"2225:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2225:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2224:14:33"},"returnParameters":{"id":47152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47151,"mutability":"mutable","name":"r","nameLocation":"2282:1:33","nodeType":"VariableDeclaration","scope":47155,"src":"2262:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$47119_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"},"typeName":{"id":47150,"nodeType":"UserDefinedTypeName","pathNode":{"id":47149,"name":"Bytes32Slot","nameLocations":["2262:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":47119,"src":"2262:11:33"},"referencedDeclaration":47119,"src":"2262:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$47119_storage_ptr","typeString":"struct StorageSlotUpgradeable.Bytes32Slot"}},"visibility":"internal"}],"src":"2261:23:33"},"scope":47167,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":47166,"nodeType":"FunctionDefinition","src":"2489:190:33","nodes":[],"body":{"id":47165,"nodeType":"Block","src":"2573:106:33","nodes":[],"statements":[{"AST":{"nodeType":"YulBlock","src":"2635:38:33","statements":[{"nodeType":"YulAssignment","src":"2649:14:33","value":{"name":"slot","nodeType":"YulIdentifier","src":"2659:4:33"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2649:6:33"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":47162,"isOffset":false,"isSlot":true,"src":"2649:6:33","suffix":"slot","valueSize":1},{"declaration":47158,"isOffset":false,"isSlot":false,"src":"2659:4:33","valueSize":1}],"id":47164,"nodeType":"InlineAssembly","src":"2626:47:33"}]},"documentation":{"id":47156,"nodeType":"StructuredDocumentation","src":"2397:87:33","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2498:14:33","parameters":{"id":47159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47158,"mutability":"mutable","name":"slot","nameLocation":"2521:4:33","nodeType":"VariableDeclaration","scope":47166,"src":"2513:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2513:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2512:14:33"},"returnParameters":{"id":47163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47162,"mutability":"mutable","name":"r","nameLocation":"2570:1:33","nodeType":"VariableDeclaration","scope":47166,"src":"2550:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$47122_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"},"typeName":{"id":47161,"nodeType":"UserDefinedTypeName","pathNode":{"id":47160,"name":"Uint256Slot","nameLocations":["2550:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":47122,"src":"2550:11:33"},"referencedDeclaration":47122,"src":"2550:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$47122_storage_ptr","typeString":"struct StorageSlotUpgradeable.Uint256Slot"}},"visibility":"internal"}],"src":"2549:23:33"},"scope":47167,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"StorageSlotUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":47110,"nodeType":"StructuredDocumentation","src":"130:1148:33","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"linearizedBaseContracts":[47167],"name":"StorageSlotUpgradeable","nameLocation":"1287:22:33","scope":47168,"usedErrors":[]}],"license":"MIT"},"id":33}